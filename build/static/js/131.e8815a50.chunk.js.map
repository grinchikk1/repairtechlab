{"version":3,"file":"static/js/131.e8815a50.chunk.js","mappings":"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","sources":["components/ButtonOutline.jsx","components/CustomSnackBar.jsx","pages/MakeAnAppointment.jsx"],"sourcesContent":["import React from \"react\";\nimport { Button } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\n\nexport default function ButtonOutline({\n    onClick,\n    text,\n    color = \"#000\",\n    type = \"button\",\n}) {\n    return (\n        <Button\n            disableElevation\n            variant=\"outlined\"\n            type={type}\n            onClick={onClick}\n            sx={{ color }}\n        >\n            <motion.div\n                whileHover={{ scale: 1.2 }}\n                whileTap={{ scale: 0.8 }}\n                transition={{\n                    type: \"spring\",\n                    stiffness: 400,\n                    damping: 20,\n                }}\n            >\n                {text}\n            </motion.div>\n        </Button>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Snackbar, Alert, AlertTitle } from \"@mui/material\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport ErrorIcon from \"@mui/icons-material/Error\";\nimport InfoIcon from \"@mui/icons-material/Info\";\n\nfunction CustomSnackbar({ open, onClose, text, titleText, severity }) {\n    const customIconMapping = {\n        success: <CheckCircleIcon fontSize=\"inherit\" />,\n        error: <ErrorIcon fontSize=\"inherit\" />,\n        info: <InfoIcon fontSize=\"inherit\" />,\n    };\n\n    return (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={open}\n            autoHideDuration={3000}\n            onClose={onClose}\n        >\n            <Alert\n                onClose={onClose}\n                severity={severity}\n                iconMapping={customIconMapping}\n            >\n                <AlertTitle>{titleText}</AlertTitle>\n                {text}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nCustomSnackbar.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    text: PropTypes.string.isRequired,\n    titleText: PropTypes.string.isRequired,\n    severity: PropTypes.string.isRequired,\n};\n\nexport default CustomSnackbar;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Typography, TextField, Box, CircularProgress } from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { addData } from \"../api/firebaseFetch\";\nimport CustomSnackbar from \"../components/CustomSnackBar\";\nimport { Context } from \"../context/AuthContext\";\nimport { fetchUser } from \"../redux/slice/userSlice\";\nimport ButtonOutline from \"../components/ButtonOutline\";\n\nconst validationSchema = Yup.object().shape({\n    username: Yup.string().required(\"Поле обовʼязкове\"),\n    phone: Yup.string()\n        .matches(/^\\+?3?8?(0\\d{9})$/, \"Не вірний формат телефону\")\n        .required(\"Поле обовʼязкове\"),\n    email: Yup.string()\n        .email(\"Не вірний формат пошти\")\n        .required(\"Поле обовʼязкове\"),\n    textField: Yup.string().required(\"Поле обовʼязкове\"),\n});\n\nexport default function MakeAnAppointment() {\n    const [titleText, setTitleText] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [severity, setSeverity] = useState(\"success\");\n\n    const [showSnackBar, setShowSnackBar] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { customer, status } = useSelector((state) => state.customer);\n    const { user } = useContext(Context);\n\n    useEffect(() => {\n        if (user) {\n            dispatch(fetchUser(user.email));\n        }\n    }, [dispatch, user]);\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            username: customer ? customer.name : \"\",\n            email: customer ? customer.email : \"\",\n            phone: customer ? customer.phone : \"\",\n            textField: \"\",\n        },\n        validationSchema,\n        onSubmit: async (values, { resetForm }) => {\n            const data = {\n                name: values.username,\n                email: values.email,\n                phone: values.phone,\n                textField: values.textField,\n            };\n            await addData(data);\n\n            setTitleText(\"Вітаємо\");\n            setText(\"Форма успішно відправлена\");\n            setSeverity(\"success\");\n            setShowSnackBar(true);\n\n            resetForm();\n        },\n    });\n\n    if (status === \"loading\") {\n        return (\n            <Box sx={{ textAlign: \"center\", mt: 8 }}>\n                <CircularProgress color=\"secondary\" />\n            </Box>\n        );\n    }\n\n    return (\n        <Box\n            component=\"form\"\n            onSubmit={formik.handleSubmit}\n            sx={{\n                margin: \"0 auto\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignContent: \"center\",\n                justifyContent: \"space-evenly\",\n                pl: 4,\n                pr: 4,\n                pt: 10,\n                pb: 4,\n                maxWidth: \"480px\",\n            }}\n        >\n            <Typography variant=\"h4\" color=\"secondary\" fontWeight=\"bold\">\n                Напишіть нам\n            </Typography>\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Імʼя\n            </Typography>\n            <TextField\n                variant=\"outlined\"\n                type=\"text\"\n                name=\"username\"\n                value={formik.values.username}\n                autoComplete=\"given-name\"\n                error={\n                    (formik.touched.username || formik.submitCount > 0) &&\n                    Boolean(formik.errors.username)\n                }\n                helperText={\n                    formik.touched.username || formik.submitCount > 0\n                        ? formik.errors.username || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Пошту\n            </Typography>\n            <TextField\n                type=\"email\"\n                name=\"email\"\n                value={formik.values.email}\n                variant=\"outlined\"\n                autoComplete=\"email\"\n                error={\n                    (formik.touched.email || formik.submitCount > 0) &&\n                    Boolean(formik.errors.email)\n                }\n                helperText={\n                    formik.touched.email || formik.submitCount > 0\n                        ? formik.errors.email || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Номер Телефону\n            </Typography>\n            <TextField\n                type=\"tel\"\n                name=\"phone\"\n                value={formik.values.phone}\n                variant=\"outlined\"\n                autoComplete=\"phone\"\n                error={\n                    (formik.touched.phone || formik.submitCount > 0) &&\n                    Boolean(formik.errors.phone)\n                }\n                helperText={\n                    formik.touched.phone || formik.submitCount > 0\n                        ? formik.errors.phone || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Повідомлення\n            </Typography>\n            <TextField\n                multiline\n                sx={{ mb: 4 }}\n                name=\"textField\"\n                value={formik.values.textField}\n                variant=\"outlined\"\n                autoComplete=\"text\"\n                error={\n                    (formik.touched.textField || formik.submitCount > 0) &&\n                    Boolean(formik.errors.textField)\n                }\n                helperText={\n                    formik.touched.textField || formik.submitCount > 0\n                        ? formik.errors.textField || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <ButtonOutline type=\"submit\" text=\"Відправити\" />\n            <CustomSnackbar\n                open={showSnackBar}\n                onClose={() => setShowSnackBar(false)}\n                titleText={titleText}\n                text={text}\n                severity={severity}\n            />\n        </Box>\n    );\n}\n"],"names":["ButtonOutline","_ref","onClick","text","color","type","_jsx","Button","disableElevation","variant","sx","children","motion","div","whileHover","scale","whileTap","transition","stiffness","damping","open","onClose","titleText","severity","customIconMapping","success","CheckCircleIcon","fontSize","error","ErrorIcon","info","InfoIcon","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","_jsxs","Alert","iconMapping","AlertTitle","validationSchema","Yup","shape","username","required","phone","matches","email","textField","MakeAnAppointment","setTitleText","useState","setText","setSeverity","showSnackBar","setShowSnackBar","dispatch","useDispatch","customer","status","useSelector","state","user","useContext","Context","useEffect","fetchUser","formik","useFormik","enableReinitialize","initialValues","name","onSubmit","async","values","resetForm","data","addData","Box","textAlign","mt","CircularProgress","component","handleSubmit","margin","display","flexDirection","alignContent","justifyContent","pl","pr","pt","pb","maxWidth","Typography","fontWeight","TextField","value","autoComplete","touched","submitCount","Boolean","errors","helperText","onChange","handleChange","onBlur","handleBlur","multiline","mb","CustomSnackbar"],"sourceRoot":""}