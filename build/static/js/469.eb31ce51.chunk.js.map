{"version":3,"file":"static/js/469.eb31ce51.chunk.js","mappings":"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","sources":["components/ButtonOutline.jsx","components/CustomSnackBar.jsx","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","pages/MakeAnAppointment.jsx"],"sourcesContent":["import React from \"react\";\nimport { Button } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\n\nexport default function ButtonOutline({\n    onClick,\n    text,\n    color = \"#000\",\n    type = \"button\",\n}) {\n    return (\n        <Button\n            disableElevation\n            variant=\"outlined\"\n            type={type}\n            onClick={onClick}\n            sx={{ color }}\n        >\n            <motion.div\n                whileHover={{ scale: 1.2 }}\n                whileTap={{ scale: 0.8 }}\n                transition={{\n                    type: \"spring\",\n                    stiffness: 400,\n                    damping: 20,\n                }}\n            >\n                {text}\n            </motion.div>\n        </Button>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Snackbar, Alert, AlertTitle } from \"@mui/material\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport ErrorIcon from \"@mui/icons-material/Error\";\nimport InfoIcon from \"@mui/icons-material/Info\";\n\nfunction CustomSnackbar({ open, onClose, text, titleText, severity }) {\n    const customIconMapping = {\n        success: <CheckCircleIcon fontSize=\"inherit\" />,\n        error: <ErrorIcon fontSize=\"inherit\" />,\n        info: <InfoIcon fontSize=\"inherit\" />,\n    };\n\n    return (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={open}\n            autoHideDuration={3000}\n            onClose={onClose}\n        >\n            <Alert\n                onClose={onClose}\n                severity={severity}\n                iconMapping={customIconMapping}\n            >\n                <AlertTitle>{titleText}</AlertTitle>\n                {text}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nCustomSnackbar.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    text: PropTypes.string.isRequired,\n    titleText: PropTypes.string.isRequired,\n    severity: PropTypes.string.isRequired,\n};\n\nexport default CustomSnackbar;\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.11.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.11.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Typography, TextField, Box, CircularProgress } from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport emailjs from \"@emailjs/browser\";\nimport { addData } from \"../api/firebaseFetch\";\nimport CustomSnackbar from \"../components/CustomSnackBar\";\nimport { Context } from \"../context/AuthContext\";\nimport { fetchUser } from \"../redux/slice/userSlice\";\nimport ButtonOutline from \"../components/ButtonOutline\";\n\nconst validationSchema = Yup.object().shape({\n    username: Yup.string().required(\"Поле обовʼязкове\"),\n    phone: Yup.string()\n        .matches(/^\\+?3?8?(0\\d{9})$/, \"Не вірний формат телефону\")\n        .required(\"Поле обовʼязкове\"),\n    email: Yup.string()\n        .email(\"Не вірний формат пошти\")\n        .required(\"Поле обовʼязкове\"),\n    textField: Yup.string().required(\"Поле обовʼязкове\"),\n});\n\nexport default function MakeAnAppointment() {\n    const [titleText, setTitleText] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [severity, setSeverity] = useState(\"success\");\n\n    const [showSnackBar, setShowSnackBar] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { customer, status } = useSelector((state) => state.customer);\n    const { user } = useContext(Context);\n\n    emailjs.init(process.env.REACT_APP_GOOGLE_MAIL_API_KEY);\n\n    useEffect(() => {\n        if (user) {\n            dispatch(fetchUser(user.email));\n        }\n    }, [dispatch, user]);\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            username: customer ? customer.name : \"\",\n            email: customer ? customer.email : \"\",\n            phone: customer ? customer.phone : \"\",\n            textField: \"\",\n            status: true,\n        },\n        validationSchema,\n        onSubmit: async (values, { resetForm }) => {\n            const data = {\n                name: values.username,\n                email: values.email,\n                phone: values.phone,\n                textField: values.textField,\n            };\n            await addData(data);\n            await emailjs.send(\n                process.env.REACT_APP_GOOGLE_MAIL_API_SERVICE,\n                process.env.REACT_APP_GOOGLE_MAIL_API_TEMPLATE,\n                values,\n                process.env.REACT_APP_GOOGLE_MAIL_API_KEY\n            );\n\n            setTitleText(\"Вітаємо\");\n            setText(\"Форма успішно відправлена\");\n            setSeverity(\"success\");\n            setShowSnackBar(true);\n\n            resetForm();\n        },\n    });\n\n    if (status === \"loading\") {\n        return (\n            <Box sx={{ textAlign: \"center\", mt: 8 }}>\n                <CircularProgress color=\"secondary\" />\n            </Box>\n        );\n    }\n\n    return (\n        <Box\n            component=\"form\"\n            onSubmit={formik.handleSubmit}\n            sx={{\n                margin: \"0 auto\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignContent: \"center\",\n                justifyContent: \"space-evenly\",\n                p: 4,\n                maxWidth: \"480px\",\n            }}\n        >\n            <Typography variant=\"h4\" color=\"secondary\" fontWeight=\"bold\">\n                Напишіть нам\n            </Typography>\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Імʼя\n            </Typography>\n            <TextField\n                variant=\"outlined\"\n                type=\"text\"\n                name=\"username\"\n                value={formik.values.username}\n                autoComplete=\"given-name\"\n                error={\n                    (formik.touched.username || formik.submitCount > 0) &&\n                    Boolean(formik.errors.username)\n                }\n                helperText={\n                    formik.touched.username || formik.submitCount > 0\n                        ? formik.errors.username || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Пошту\n            </Typography>\n            <TextField\n                type=\"email\"\n                name=\"email\"\n                value={formik.values.email}\n                variant=\"outlined\"\n                autoComplete=\"email\"\n                error={\n                    (formik.touched.email || formik.submitCount > 0) &&\n                    Boolean(formik.errors.email)\n                }\n                helperText={\n                    formik.touched.email || formik.submitCount > 0\n                        ? formik.errors.email || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Номер Телефону\n            </Typography>\n            <TextField\n                type=\"tel\"\n                name=\"phone\"\n                value={formik.values.phone}\n                variant=\"outlined\"\n                autoComplete=\"phone\"\n                error={\n                    (formik.touched.phone || formik.submitCount > 0) &&\n                    Boolean(formik.errors.phone)\n                }\n                helperText={\n                    formik.touched.phone || formik.submitCount > 0\n                        ? formik.errors.phone || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Повідомлення\n            </Typography>\n            <TextField\n                multiline\n                sx={{ mb: 4 }}\n                name=\"textField\"\n                value={formik.values.textField}\n                variant=\"outlined\"\n                autoComplete=\"text\"\n                error={\n                    (formik.touched.textField || formik.submitCount > 0) &&\n                    Boolean(formik.errors.textField)\n                }\n                helperText={\n                    formik.touched.textField || formik.submitCount > 0\n                        ? formik.errors.textField || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <ButtonOutline type=\"submit\" text=\"Відправити\" />\n            <CustomSnackbar\n                open={showSnackBar}\n                onClose={() => setShowSnackBar(false)}\n                titleText={titleText}\n                text={text}\n                severity={severity}\n            />\n        </Box>\n    );\n}\n"],"names":["ButtonOutline","_ref","onClick","text","color","type","_jsx","Button","disableElevation","variant","sx","children","motion","div","whileHover","scale","whileTap","transition","stiffness","damping","open","onClose","titleText","severity","customIconMapping","success","CheckCircleIcon","fontSize","error","ErrorIcon","info","InfoIcon","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","_jsxs","Alert","iconMapping","AlertTitle","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","_ref2","Object","keys","forEach","key","setRequestHeader","send","init","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","validationSchema","Yup","shape","username","required","phone","matches","email","textField","MakeAnAppointment","setTitleText","useState","setText","setSeverity","showSnackBar","setShowSnackBar","dispatch","useDispatch","customer","useSelector","state","user","useContext","Context","emailjs","process","useEffect","fetchUser","formik","useFormik","enableReinitialize","initialValues","name","onSubmit","async","values","resetForm","addData","Box","textAlign","mt","CircularProgress","component","handleSubmit","margin","display","flexDirection","alignContent","justifyContent","p","maxWidth","Typography","fontWeight","pt","pb","TextField","value","autoComplete","touched","submitCount","Boolean","errors","helperText","onChange","handleChange","onBlur","handleBlur","multiline","mb","CustomSnackbar"],"sourceRoot":""}