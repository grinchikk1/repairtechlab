{"version":3,"file":"static/js/131.47571146.chunk.js","mappings":"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","sources":["components/CustomSnackBar.jsx","pages/MakeAnAppointment.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Snackbar, Alert, AlertTitle } from \"@mui/material\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport ErrorIcon from \"@mui/icons-material/Error\";\nimport InfoIcon from \"@mui/icons-material/Info\";\n\nfunction CustomSnackbar({ open, onClose, text, titleText, severity }) {\n    const customIconMapping = {\n        success: <CheckCircleIcon fontSize=\"inherit\" />,\n        error: <ErrorIcon fontSize=\"inherit\" />,\n        info: <InfoIcon fontSize=\"inherit\" />,\n    };\n\n    return (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={open}\n            autoHideDuration={3000}\n            onClose={onClose}\n        >\n            <Alert\n                onClose={onClose}\n                severity={severity}\n                iconMapping={customIconMapping}\n            >\n                <AlertTitle>{titleText}</AlertTitle>\n                {text}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nCustomSnackbar.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    text: PropTypes.string.isRequired,\n    titleText: PropTypes.string.isRequired,\n    severity: PropTypes.string.isRequired,\n};\n\nexport default CustomSnackbar;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {\n    Typography,\n    Button,\n    TextField,\n    Box,\n    CircularProgress,\n} from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { addData } from \"../api/firebaseFetch\";\nimport CustomSnackbar from \"../components/CustomSnackBar\";\nimport { Context } from \"../context/AuthContext\";\nimport { fetchUser } from \"../redux/slice/userSlice\";\n\nconst validationSchema = Yup.object().shape({\n    username: Yup.string().required(\"Поле обовʼязкове\"),\n    email: Yup.string()\n        .email(\"Не вірний формат пошти\")\n        .required(\"Поле обовʼязкове\"),\n    textField: Yup.string().required(\"Поле обовʼязкове\"),\n});\n\nexport default function MakeAnAppointment() {\n    const [titleText, setTitleText] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [severity, setSeverity] = useState(\"success\");\n\n    const [showSnackBar, setShowSnackBar] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const { customer, status } = useSelector((state) => state.customer);\n    const { user } = useContext(Context);\n\n    useEffect(() => {\n        if (user) {\n            dispatch(fetchUser(user.email));\n        }\n    }, [dispatch, user]);\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            username: customer ? customer.name : \"\",\n            email: customer ? customer.email : \"\",\n            textField: \"\",\n        },\n        validationSchema,\n        onSubmit: async (values, { resetForm }) => {\n            const data = {\n                name: values.username,\n                email: values.email,\n                textField: values.textField,\n            };\n            await addData(data);\n\n            setTitleText(\"Вітаємо\");\n            setText(\"Форма успішно відправлена\");\n            setSeverity(\"success\");\n            setShowSnackBar(true);\n\n            resetForm();\n        },\n    });\n\n    if (status === \"loading\") {\n        return (\n            <Box sx={{ textAlign: \"center\", mt: 8 }}>\n                <CircularProgress color=\"secondary\" />\n            </Box>\n        );\n    }\n\n    return (\n        <Box\n            component=\"form\"\n            onSubmit={formik.handleSubmit}\n            sx={{\n                margin: \"0 auto\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignContent: \"center\",\n                justifyContent: \"space-evenly\",\n                height: \"calc(100vh - 120px)\",\n                pl: 4,\n                pr: 4,\n                pt: 10,\n                pb: 4,\n                maxWidth: \"480px\",\n            }}\n        >\n            <Typography variant=\"h4\" color=\"secondary\" fontWeight=\"bold\">\n                Напишіть нам\n            </Typography>\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Імʼя\n            </Typography>\n            <TextField\n                variant=\"outlined\"\n                type=\"text\"\n                name=\"username\"\n                value={formik.values.username}\n                autoComplete=\"given-name\"\n                error={\n                    (formik.touched.username || formik.submitCount > 0) &&\n                    Boolean(formik.errors.username)\n                }\n                helperText={\n                    formik.touched.username || formik.submitCount > 0\n                        ? formik.errors.username || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Вкажіть Пошту\n            </Typography>\n            <TextField\n                type=\"email\"\n                name=\"email\"\n                value={formik.values.email}\n                variant=\"outlined\"\n                autoComplete=\"email\"\n                error={\n                    (formik.touched.email || formik.submitCount > 0) &&\n                    Boolean(formik.errors.email)\n                }\n                helperText={\n                    formik.touched.email || formik.submitCount > 0\n                        ? formik.errors.email || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n\n            <Typography variant=\"h6\" color=\"primary\" sx={{ pt: 3, pb: 1 }}>\n                Повідомлення\n            </Typography>\n            <TextField\n                multiline\n                name=\"textField\"\n                value={formik.values.textField}\n                variant=\"outlined\"\n                autoComplete=\"text\"\n                error={\n                    (formik.touched.textField || formik.submitCount > 0) &&\n                    Boolean(formik.errors.textField)\n                }\n                helperText={\n                    formik.touched.textField || formik.submitCount > 0\n                        ? formik.errors.textField || \"\\u200b\"\n                        : \" \"\n                }\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            <Button variant=\"outlined\" type=\"submit\" sx={{ mt: 4, mb: 4 }}>\n                Відправити\n            </Button>\n            <CustomSnackbar\n                open={showSnackBar}\n                onClose={() => setShowSnackBar(false)}\n                titleText={titleText}\n                text={text}\n                severity={severity}\n            />\n        </Box>\n    );\n}\n"],"names":["_ref","open","onClose","text","titleText","severity","customIconMapping","success","_jsx","CheckCircleIcon","fontSize","error","ErrorIcon","info","InfoIcon","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","children","_jsxs","Alert","iconMapping","AlertTitle","validationSchema","Yup","shape","username","required","email","textField","MakeAnAppointment","setTitleText","useState","setText","setSeverity","showSnackBar","setShowSnackBar","dispatch","useDispatch","customer","status","useSelector","state","user","useContext","Context","useEffect","fetchUser","formik","useFormik","enableReinitialize","initialValues","name","onSubmit","async","values","resetForm","data","addData","Box","sx","textAlign","mt","CircularProgress","color","component","handleSubmit","margin","display","flexDirection","alignContent","justifyContent","height","pl","pr","pt","pb","maxWidth","Typography","variant","fontWeight","TextField","type","value","autoComplete","touched","submitCount","Boolean","errors","helperText","onChange","handleChange","onBlur","handleBlur","multiline","Button","mb","CustomSnackbar"],"sourceRoot":""}